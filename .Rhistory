?dbinom()
whiteashtrees <- seq(0,100, by = 1)
dbinom(whiteashtrees, 100, 0.3)
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3))
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3))
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,1))
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.5))
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.3))
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.3), ylab = P(Infection), xlab = Trees)
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.3), ylab = P(Infection), xlab = Tree)
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.3), ylab = :"P(Infection)", xlab = "Tree")
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.3), ylab = P(Infection), xlab = x)
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.3), ylab = P(Infection))
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.3))
?plot()
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.3), ylab = "Probability of Infection")
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.3), ylab = "Probability of Infection", xlab = Sample)
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.3), ylab = "Probability of Infection", xlab = "Sample")
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.3), ylab = "Probability of Infection", xlab = "Sample", main = "PDF of 100 White Ash Trees with Parameter p = 0.3")
#| label: load-packagesa
#| include: true
library(palmerpenguins)
fx <- c(3/8,1/8,1/8,3/8)
X <- c(1,2,3,4)
# realized I do not need this: prob1C.table <- data.frame(fx,X)
barplot(fx, xlab="X", ylab="f(x)", names.arg = c("1","2","3","4"), ylim = c(0,1))
Fx <- c(3/8,((3/8)+(1/8)),((3/8)+(1/8)+(1/8)),((3/8)+(1/8)+(1/8)+(3/8)))
# realized I do not need this: prob1D.table <- data.frame(Fx,X)
barplot(Fx, xlab = "X", ylab = "f(x)", names.arg = c("1","2","3","4"))
support0_10 <- c(seq(0,10))
XPDF <- function(x,p){
((1-p)^x)*p
}
barplot(XPDF(support0_10,0.5), ylab = "probability density", xlab = "x", main = "PDF for X")
YPDF <- function(y,l){
l*(exp(1)^(-l*y))
}
plot(YPDF(support0_10,0.5), ylab = "probability density", xlab = "y", main = "PDF for Y")
XPDF(5,0.5)
pgeom(support0_10[7], prob=0.5) - pgeom(support0_10[6], prob=0.5)
pexp(support0_10[7], rate=0.5) - pexp(support0_10[6], rate=0.5)
?dnorm()
#the par function is a handy tool for making side-by-side plots in base R
#BUT for publication-quality multi-panel figures, I recommend learning ggplot
#in combination withthe ggpubr package
#This command tells us to lay out plots in one row and two columns
par(mfrow=c(1,2))
#plot one is a histogram, use ?hist() for documentation
#try playing with the "breaks" argument
hist(penguins$body_mass_g,
freq=FALSE, #Tells R to plot density rather than frequency on Y-axis
main="",
xlab="Penguin Body Mass (g)")
#| label: load-packagesa
#| include: true
library(palmerpenguins)
fx <- c(3/8,1/8,1/8,3/8)
X <- c(1,2,3,4)
# realized I do not need this: prob1C.table <- data.frame(fx,X)
barplot(fx, xlab="X", ylab="f(x)", names.arg = c("1","2","3","4"), ylim = c(0,1))
Fx <- c(3/8,((3/8)+(1/8)),((3/8)+(1/8)+(1/8)),((3/8)+(1/8)+(1/8)+(3/8)))
# realized I do not need this: prob1D.table <- data.frame(Fx,X)
barplot(Fx, xlab = "X", ylab = "f(x)", names.arg = c("1","2","3","4"))
support0_10 <- c(seq(0,10))
XPDF <- function(x,p){
((1-p)^x)*p
}
barplot(XPDF(support0_10,0.5), ylab = "probability density", xlab = "x", main = "PDF for X")
YPDF <- function(y,l){
l*(exp(1)^(-l*y))
}
plot(YPDF(support0_10,0.5), ylab = "probability density", xlab = "y", main = "PDF for Y")
XPDF(5,0.5)
pgeom(support0_10[7], prob=0.5) - pgeom(support0_10[6], prob=0.5)
pexp(support0_10[7], rate=0.5) - pexp(support0_10[6], rate=0.5)
whiteashtrees <- seq(0,100, by = 1)
plot(dbinom(whiteashtrees, 100, 0.3), ylim = c(0,.3), ylab = "Probability of Infection", xlab = "Sample", main = "PDF of 100 White Ash Trees with Parameter p = 0.3")
#the par function is a handy tool for making side-by-side plots in base R
#BUT for publication-quality multi-panel figures, I recommend learning ggplot
#in combination withthe ggpubr package
#This command tells us to lay out plots in one row and two columns
par(mfrow=c(1,2))
#plot one is a histogram, use ?hist() for documentation
#try playing with the "breaks" argument
hist(penguins$body_mass_g,
freq=FALSE, #Tells R to plot density rather than frequency on Y-axis
main="",
xlab="Penguin Body Mass (g)")
#plot two is a density plot, use ?density() for documentation
#try playing with the "bw" argument
plot(density(penguins$body_mass_g,na.rm=T),
main="",
xlab="Penguin Body Mass (g)")
#Make sure to set this back to one row and one column for your next figures
par(mfrow=c(1,1))
quantile(x = penguins$body_mass_g,
probs = 0.90,
na.rm=T) # we need to tell this function to ignore the NA values
?density()
#First let's generate some data from a standard normal distribution
norm_data <- rnorm(1000)
#Let's now calculate the quantiles for our penguins
quantiles_penguins <- quantile(x = penguins$body_mass_g,
probs = seq(0.01,0.99,0.01),
na.rm=T)
#And for our theoretical distribution
quantiles_norm <- quantile(x = norm_data,
probs = seq(0.01,0.99,0.01))
#Now, let's plot them against one another
plot(quantiles_norm,quantiles_penguins,
xlab="Simulated Standard Normal Quantiles",
ylab="Sample Quantiles")
#For good measure, let's add a trend line to make it easier to visualize
abline(lm(quantiles_penguins~quantiles_norm))
qqnorm(penguins$body_mass_g)
qqline(penguins$body_mass_g)
lnormal_qqplot <- function(data){
ldistribution <- log(data)
qqnorm(ldata)
qqline(ldata)
}
lnormal_qqplot <- function(data){
ldistribution <- log(data)
qqnorm(ldata)
qqline(ldata)
}
lnormal_qqplot(penguins$body_mass_g)
lnormal_qqplot <- function(data){
ldistribution <- log(data)
qqnorm(ldata)
qqline(ldata)
}
lnormal_qqplot(data = penguins$body_mass_g)
lnormal_qqplot <- function(data){
ldata <- log(data)
qqnorm(ldata)
qqline(ldata)
}
lnormal_qqplot(data = penguins$body_mass_g)
lnormal_qqplot <- function(data){
ldata <- log(data)
qqnorm(ldata)
qqline(ldata)
}
lnormal_qqplot <- function(data){
ldata <- log(data)
qqnorm(ldata)
qqline(ldata)
lnormal_qqplot(ldata)
}
lnormal_qqplot <- function(data){
ldata <- log(data)
qqnorm(ldata)
qqline(ldata)
}
lnormal_qqplot(data = penguins$body_mass_g)
?par()
